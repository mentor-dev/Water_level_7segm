
Water_level_7segm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000005ee  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800076  00800076  00000698  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000754  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000584  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004da  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a8  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	7e c2       	rjmp	.+1276   	; 0x500 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	ed c1       	rjmp	.+986    	; 0x3f6 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	47 c2       	rjmp	.+1166   	; 0x4b4 <__vector_18>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ee       	ldi	r30, 0xEE	; 238
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 39       	cpi	r26, 0x91	; 145
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	39 d1       	rcall	.+626    	; 0x2cc <main>
  5a:	c7 c2       	rjmp	.+1422   	; 0x5ea <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Presets>:

		/*-------------------------------- Предустановки ------------------------------------*/

void Presets(void)
{
	DDRB = 0xff;																	// настройка портов
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<Razr_1) | (1<<Razr_2) | (1<<Razr_3) | (1<<Pump);
  62:	81 b3       	in	r24, 0x11	; 17
  64:	82 67       	ori	r24, 0x72	; 114
  66:	81 bb       	out	0x11, r24	; 17
	DDRSR04 |= (1<<SR04_trig);
  68:	88 9a       	sbi	0x11, 0	; 17
	PORTB = 0;
  6a:	18 ba       	out	0x18, r1	; 24
	Razr_1_OFF; Razr_2_OFF; Razr_3_OFF;
  6c:	96 98       	cbi	0x12, 6	; 18
  6e:	95 98       	cbi	0x12, 5	; 18
  70:	94 98       	cbi	0x12, 4	; 18
	PORTSR04 &=~ (1<<SR04_trig);
  72:	90 98       	cbi	0x12, 0	; 18
	Pump_ON;
  74:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<BTN);
  76:	93 9a       	sbi	0x12, 3	; 18
																					// таймер 0
	TCCR0A |= (1<<WGM01);																// режим работы таймера 0 (т. 11.8 стр. 84)		CTC
  78:	80 b7       	in	r24, 0x30	; 48
  7a:	82 60       	ori	r24, 0x02	; 2
  7c:	80 bf       	out	0x30, r24	; 48
	OCR0A = 51;																			// конечное значение счетчика (11.9.4 стр. 75)	15625/(51+1)=300Hz  (3.3 ms)
  7e:	83 e3       	ldi	r24, 0x33	; 51
  80:	86 bf       	out	0x36, r24	; 54
	TCCR0B |= (1<<CS02);																// предделитель таймера 0 (т. 11.9 стр. 86)		4000000/256=15625 Hz
  82:	83 b7       	in	r24, 0x33	; 51
  84:	84 60       	ori	r24, 0x04	; 4
  86:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0A);																// предывание при совпадении А
  88:	89 b7       	in	r24, 0x39	; 57
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	89 bf       	out	0x39, r24	; 57
																					// таймер 1
	TCCR1B|= (1<<CS11);																	// предделитель таймера 1 (т. 12.6 стр. 114)	4000000/8=500000 Hz (2 us)
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	82 60       	ori	r24, 0x02	; 2
  92:	8e bd       	out	0x2e, r24	; 46
																					// прерывание по нажатю кнопки
	MCUCR |= (1<<ISC11);																// по ниспадающему фронту
  94:	85 b7       	in	r24, 0x35	; 53
  96:	88 60       	ori	r24, 0x08	; 8
  98:	85 bf       	out	0x35, r24	; 53
//////////////////////////////////////////////////////////////////////////
//	GIMSK |= (1<<INT1);																	// разрешение прерывания INT1
																					// таймер WDT
	asm ("cli");																		// глобальный запрет прерываний на время конфигурирования WDT
  9a:	f8 94       	cli
	asm ("wdr");																		// сброс счетчика WDT
  9c:	a8 95       	wdr
	WDTCR |= (1<<WDCE) | (1<<WDE);
  9e:	81 b5       	in	r24, 0x21	; 33
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);								// предделитель 256k - 2 сек. (повторяется в ChangeMode()) (стр. 47)
  a4:	81 b5       	in	r24, 0x21	; 33
  a6:	8f 60       	ori	r24, 0x0F	; 15
  a8:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (1<<WDIE);																	// включение WDT в режиме прерываний
  aa:	81 b5       	in	r24, 0x21	; 33
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	81 bd       	out	0x21, r24	; 33
	
	asm("sei");
  b0:	78 94       	sei
  b2:	08 95       	ret

000000b4 <SendTrig>:

        /*------------------------ Отправка сигнала на измерение ----------------------------*/
        
void SendTrig(void)
{
	PORTSR04 |= (1<<SR04_trig);															// Начало импульса
  b4:	90 9a       	sbi	0x12, 0	; 18
  b6:	8d e0       	ldi	r24, 0x0D	; 13
	for (unsigned char temp=0; temp<13; temp++)	asm("nop");								// Задержка (~54 такта ~13 us)
  b8:	00 00       	nop
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	e9 f7       	brne	.-6      	; 0xb8 <SendTrig+0x4>
	PORTSR04 &=~ (1<<SR04_trig);														// Конец импульса
  be:	90 98       	cbi	0x12, 0	; 18
	        
	MCUCR |= (1<<ISC01) | (1<<ISC00);													// Прерывание по возрастающему фронту INT0 (ожидание начала импульса Echo)
  c0:	85 b7       	in	r24, 0x35	; 53
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT0);																	// Разрешение прерывания INT0
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8b bf       	out	0x3b, r24	; 59
  cc:	08 95       	ret

000000ce <Averaging>:

        /*----------------------------- Усреднение значений ---------------------------------*/    // скользящее среднее
        
int Averaging(int Dig)
{
	Arr_Average[Arr_Average_Position] = Dig;											// Запись в текущий элемент массива нового значения
  ce:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	e0 58       	subi	r30, 0x80	; 128
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	91 83       	std	Z+1, r25	; 0x01
  de:	80 83       	st	Z, r24
	Arr_Average_Position = (Arr_Average_Position + 1) % Average_factor;					// Перевод указателя на следующий элемент массива
  e0:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__data_end>
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	27 70       	andi	r18, 0x07	; 7
  ec:	33 27       	eor	r19, r19
  ee:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <__data_end>
	
	if ((Flag_byte & (1<<_array_full)) == 0)											// если массив пустой
  f2:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <Flag_byte>
  f6:	27 fd       	sbrc	r18, 7
  f8:	0d c0       	rjmp	.+26     	; 0x114 <__stack+0x35>
  fa:	e2 e8       	ldi	r30, 0x82	; 130
  fc:	f0 e0       	ldi	r31, 0x00	; 0
	{
		for (unsigned char a=1; a < Average_factor; a++)								// заполнение массива одинаковыми значениями
		{
			Arr_Average [a] = Dig;
  fe:	81 93       	st	Z+, r24
 100:	91 93       	st	Z+, r25
	Arr_Average[Arr_Average_Position] = Dig;											// Запись в текущий элемент массива нового значения
	Arr_Average_Position = (Arr_Average_Position + 1) % Average_factor;					// Перевод указателя на следующий элемент массива
	
	if ((Flag_byte & (1<<_array_full)) == 0)											// если массив пустой
	{
		for (unsigned char a=1; a < Average_factor; a++)								// заполнение массива одинаковыми значениями
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	e0 39       	cpi	r30, 0x90	; 144
 106:	f2 07       	cpc	r31, r18
 108:	d1 f7       	brne	.-12     	; 0xfe <__stack+0x1f>
		{
			Arr_Average [a] = Dig;
		}
		
		Flag_byte |= (1<<_array_full);													// установка флага заполненного массива
 10a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
 114:	e0 e8       	ldi	r30, 0x80	; 128
 116:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	Dig = 0;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
	for (unsigned char i=0; i < Average_factor; i++)
	{
		Dig = Dig + Arr_Average[i];														// Суммирование всех элементов массива
 11c:	21 91       	ld	r18, Z+
 11e:	31 91       	ld	r19, Z+
 120:	82 0f       	add	r24, r18
 122:	93 1f       	adc	r25, r19
		
		Flag_byte |= (1<<_array_full);													// установка флага заполненного массива
	}
	
	Dig = 0;
	for (unsigned char i=0; i < Average_factor; i++)
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	e0 39       	cpi	r30, 0x90	; 144
 128:	f2 07       	cpc	r31, r18
 12a:	c1 f7       	brne	.-16     	; 0x11c <__stack+0x3d>
	{
		Dig = Dig + Arr_Average[i];														// Суммирование всех элементов массива
	}
	return Dig / Average_factor;														// Результат --> сумма всех элементов / количество элеметов
 12c:	97 fd       	sbrc	r25, 7
 12e:	07 96       	adiw	r24, 0x07	; 7
	//	return Dig >> 3;																// сдвиг вмето деления на степень двойки Average_Factor
}
 130:	23 e0       	ldi	r18, 0x03	; 3
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	2a 95       	dec	r18
 138:	e1 f7       	brne	.-8      	; 0x132 <__stack+0x53>
 13a:	08 95       	ret

0000013c <SetSymbols>:

        /*----------------------- Разделение числа на три разряда ---------------------------*/
        
void SetSymbols(void)
{
	asm("cli");
 13c:	f8 94       	cli
	
	Sym_Razr_1 = 0;	Sym_Razr_2 = 0; Sym_Razr_3 = 0;										// сброс предыдущих значений
 13e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Sym_Razr_1>
 142:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <Sym_Razr_2>
 146:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Sym_Razr_3>
	
	if (Dig_Ind_Avr <= 0)																// если уровень воды ниже 0
 14a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Dig_Ind_Avr>
 14e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Dig_Ind_Avr+0x1>
 152:	18 16       	cp	r1, r24
 154:	19 06       	cpc	r1, r25
 156:	94 f0       	brlt	.+36     	; 0x17c <SetSymbols+0x40>
	{
		Sym_Razr_1 = Sym_Defis;
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Sym_Razr_1>
		Sym_Razr_2 = Sym_Defis;
 15e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Sym_Razr_2>
		Sym_Razr_3 = Sym_Defis;
 162:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Sym_Razr_3>
		if (!(Flag_byte & (1<<_pump_is_off)))											// если насос включен
 166:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 16a:	83 fd       	sbrc	r24, 3
 16c:	58 c0       	rjmp	.+176    	; 0x21e <SetSymbols+0xe2>
		{
			Pump_OFF;																	// выключение насоса
 16e:	91 9a       	sbi	0x12, 1	; 18
			Flag_byte |= (1<<_pump_is_off);												// установка флага выключенного насоса
 170:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 174:	88 60       	ori	r24, 0x08	; 8
 176:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
 17a:	51 c0       	rjmp	.+162    	; 0x21e <SetSymbols+0xe2>
		}
	}
	else if (Dig_Ind_Avr > Level_max)													// если уровень воды > max
 17c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Dig_Ind_Avr>
 180:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Dig_Ind_Avr+0x1>
 184:	85 3a       	cpi	r24, 0xA5	; 165
 186:	91 05       	cpc	r25, r1
 188:	44 f0       	brlt	.+16     	; 0x19a <SetSymbols+0x5e>
	{
		Sym_Razr_1 = Sym_F;
 18a:	8b e0       	ldi	r24, 0x0B	; 11
 18c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Sym_Razr_1>
		Sym_Razr_2 = Sym_U;
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Sym_Razr_2>
		Sym_Razr_3 = Sym_L;
 196:	8d e0       	ldi	r24, 0x0D	; 13
 198:	40 c0       	rjmp	.+128    	; 0x21a <SetSymbols+0xde>
	}
	else																				// если уровень в пределах нормы
	{
		if (Flag_byte & (1<<_pump_is_off))												// если насос выключен
 19a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 19e:	83 ff       	sbrs	r24, 3
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <SetSymbols+0x7e>
		{
			if (Dig_Ind_Avr >= Level_pump_on)											// если уровень достиг порога включения
 1a2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Dig_Ind_Avr>
 1a6:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Dig_Ind_Avr+0x1>
 1aa:	05 97       	sbiw	r24, 0x05	; 5
 1ac:	34 f0       	brlt	.+12     	; 0x1ba <SetSymbols+0x7e>
			{
				Pump_ON;																// включение насоса
 1ae:	91 98       	cbi	0x12, 1	; 18
				Flag_byte &=~ (1<<_pump_is_off);										// сброс флага
 1b0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
			}
		}
		
		while (Dig_Ind_Avr >= 100)														// разделение на сотни, десятки, единицы
 1ba:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Dig_Ind_Avr>
 1be:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Dig_Ind_Avr+0x1>
 1c2:	84 36       	cpi	r24, 0x64	; 100
 1c4:	91 05       	cpc	r25, r1
 1c6:	84 f0       	brlt	.+32     	; 0x1e8 <SetSymbols+0xac>
		{
			Sym_Razr_1 ++;
 1c8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Sym_Razr_1>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Sym_Razr_1>
			Dig_Ind_Avr -= 100;
 1d2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Dig_Ind_Avr>
 1d6:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Dig_Ind_Avr+0x1>
 1da:	84 56       	subi	r24, 0x64	; 100
 1dc:	91 09       	sbc	r25, r1
 1de:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Dig_Ind_Avr+0x1>
 1e2:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Dig_Ind_Avr>
 1e6:	e9 cf       	rjmp	.-46     	; 0x1ba <SetSymbols+0x7e>
		}
		while (Dig_Ind_Avr >= 10)
 1e8:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Dig_Ind_Avr>
 1ec:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Dig_Ind_Avr+0x1>
 1f0:	0a 97       	sbiw	r24, 0x0a	; 10
 1f2:	7c f0       	brlt	.+30     	; 0x212 <SetSymbols+0xd6>
		{
			Sym_Razr_2 ++;
 1f4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Sym_Razr_2>
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Sym_Razr_2>
			Dig_Ind_Avr -= 10;
 1fe:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Dig_Ind_Avr>
 202:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Dig_Ind_Avr+0x1>
 206:	0a 97       	sbiw	r24, 0x0a	; 10
 208:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Dig_Ind_Avr+0x1>
 20c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Dig_Ind_Avr>
 210:	eb cf       	rjmp	.-42     	; 0x1e8 <SetSymbols+0xac>
		}
		Sym_Razr_3 = Dig_Ind_Avr;
 212:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Dig_Ind_Avr>
 216:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Dig_Ind_Avr+0x1>
 21a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Sym_Razr_3>
	}
	
	asm("sei");
 21e:	78 94       	sei
 220:	08 95       	ret

00000222 <ChangeMode>:

        /*----------------------------- Смена режима работы ---------------------------------*/
        
void ChangeMode(void)
{
	if ((!(Flag_byte & (1<<_mode_on))) && (!(Flag_byte & (1<<_mode_off))))		// если активен режим AUTO
 222:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 226:	85 fd       	sbrc	r24, 5
 228:	1c c0       	rjmp	.+56     	; 0x262 <ChangeMode+0x40>
 22a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 22e:	86 fd       	sbrc	r24, 6
 230:	18 c0       	rjmp	.+48     	; 0x262 <ChangeMode+0x40>
	{
		asm ("cli");
 232:	f8 94       	cli
		asm ("wdr");
 234:	a8 95       	wdr
		WDTCR |= (1<<WDCE) | (1<<WDE);
 236:	81 b5       	in	r24, 0x21	; 33
 238:	88 61       	ori	r24, 0x18	; 24
 23a:	81 bd       	out	0x21, r24	; 33
		WDTCR = 0;																		// выкл. измерения расстояния (WDT)
 23c:	11 bc       	out	0x21, r1	; 33
		Flag_byte |= (1<<_mode_on);														// вкл. режима ON
 23e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 242:	80 62       	ori	r24, 0x20	; 32
 244:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		Pump_ON;
 248:	91 98       	cbi	0x12, 1	; 18
		Flag_byte &=~ (1<<_pump_is_off);												// вкл. насоса
 24a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		Sym_Razr_1 = 0;
 254:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Sym_Razr_1>
		Sym_Razr_2 = Sym_n;
 258:	8e e0       	ldi	r24, 0x0E	; 14
 25a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Sym_Razr_2>
		Sym_Razr_3 = Sym_NUL;															// индикация "On "
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	1a c0       	rjmp	.+52     	; 0x296 <ChangeMode+0x74>
		asm("sei");
	} 
	else if (Flag_byte & (1<<_mode_on))											// если активен режим ON
 262:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 266:	85 ff       	sbrs	r24, 5
 268:	1a c0       	rjmp	.+52     	; 0x29e <ChangeMode+0x7c>
	{
		asm ("cli");
 26a:	f8 94       	cli
		Flag_byte &=~ (1<<_mode_on);													// выкл. режима ON
 26c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 270:	8f 7d       	andi	r24, 0xDF	; 223
 272:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		Flag_byte |= (1<<_mode_off);													// вкл. рефима OFF
 276:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		Pump_OFF;
 280:	91 9a       	sbi	0x12, 1	; 18
		Flag_byte |= (1<<_pump_is_off);													// выкл. насоса
 282:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 286:	88 60       	ori	r24, 0x08	; 8
 288:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		Sym_Razr_1 = 0;
 28c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Sym_Razr_1>
		Sym_Razr_2 = Sym_F;
 290:	8b e0       	ldi	r24, 0x0B	; 11
 292:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Sym_Razr_2>
		Sym_Razr_3 = Sym_F;																// индикация "OFF"
 296:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Sym_Razr_3>
		asm("sei");
 29a:	78 94       	sei
 29c:	08 95       	ret
	}
	else if (Flag_byte & (1<<_mode_off))										// если активен режим OFF
 29e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 2a2:	86 ff       	sbrs	r24, 6
 2a4:	12 c0       	rjmp	.+36     	; 0x2ca <ChangeMode+0xa8>
	{
		asm("cli");
 2a6:	f8 94       	cli
		Flag_byte &=~ (1<<_mode_off);													// выкл. режима OFF
 2a8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 2ac:	8f 7b       	andi	r24, 0xBF	; 191
 2ae:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		asm ("wdr");
 2b2:	a8 95       	wdr
		WDTCR |= (1<<WDCE) | (1<<WDE);
 2b4:	81 b5       	in	r24, 0x21	; 33
 2b6:	88 61       	ori	r24, 0x18	; 24
 2b8:	81 bd       	out	0x21, r24	; 33
		WDTCR |= (1<<WDE) | (1<<WDP2)| (1<<WDP1)| (1<<WDP0);
 2ba:	81 b5       	in	r24, 0x21	; 33
 2bc:	8f 60       	ori	r24, 0x0F	; 15
 2be:	81 bd       	out	0x21, r24	; 33
		WDTCR |= (1<<WDIE);																// вкл. измерения расстояния (WDT)
 2c0:	81 b5       	in	r24, 0x21	; 33
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	81 bd       	out	0x21, r24	; 33
		asm("sei");
 2c6:	78 94       	sei
		SendTrig();																		// измерение не дожидаясь срабатывания WDT
 2c8:	f5 ce       	rjmp	.-534    	; 0xb4 <SendTrig>
 2ca:	08 95       	ret

000002cc <main>:
	*                                     ОСНОВНАЯ ФУНКЦИЯ                                        *
	**********************************************************************************************/

int main(void)
{
	Presets();
 2cc:	c8 de       	rcall	.-624    	; 0x5e <Presets>
			if (EchoTimerCount <= 460)													// расчет по формулам в трех диапазонах (см. файл .xlsx)
				Dig_Ind = 182 - EchoTimerCount * 182 / 1620;
			else if (EchoTimerCount >= 1260)	
				Dig_Ind = 162 - EchoTimerCount * 162 / 1495;
			else								
				Dig_Ind = 190 - EchoTimerCount * 190 / 1455;			
 2ce:	8f ea       	ldi	r24, 0xAF	; 175
 2d0:	c8 2e       	mov	r12, r24
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	d8 2e       	mov	r13, r24
 2d6:	e1 2c       	mov	r14, r1
 2d8:	f1 2c       	mov	r15, r1
 2da:	9e eb       	ldi	r25, 0xBE	; 190
 2dc:	29 2e       	mov	r2, r25
 2de:	31 2c       	mov	r3, r1
		if (Flag_byte & (1<<_echo_ended))												// если обнаружено завершенное сканирование
		{
			if (EchoTimerCount <= 460)													// расчет по формулам в трех диапазонах (см. файл .xlsx)
				Dig_Ind = 182 - EchoTimerCount * 182 / 1620;
			else if (EchoTimerCount >= 1260)	
				Dig_Ind = 162 - EchoTimerCount * 162 / 1495;
 2e0:	27 ed       	ldi	r18, 0xD7	; 215
 2e2:	82 2e       	mov	r8, r18
 2e4:	25 e0       	ldi	r18, 0x05	; 5
 2e6:	92 2e       	mov	r9, r18
 2e8:	a1 2c       	mov	r10, r1
 2ea:	b1 2c       	mov	r11, r1
 2ec:	02 ea       	ldi	r16, 0xA2	; 162
 2ee:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{
		if (Flag_byte & (1<<_echo_ended))												// если обнаружено завершенное сканирование
		{
			if (EchoTimerCount <= 460)													// расчет по формулам в трех диапазонах (см. файл .xlsx)
				Dig_Ind = 182 - EchoTimerCount * 182 / 1620;
 2f0:	34 e5       	ldi	r19, 0x54	; 84
 2f2:	43 2e       	mov	r4, r19
 2f4:	36 e0       	ldi	r19, 0x06	; 6
 2f6:	53 2e       	mov	r5, r19
 2f8:	61 2c       	mov	r6, r1
 2fa:	71 2c       	mov	r7, r1
 2fc:	c6 eb       	ldi	r28, 0xB6	; 182
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
{
	Presets();
	
	while (1)
	{
		if (Flag_byte & (1<<_echo_ended))												// если обнаружено завершенное сканирование
 300:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 304:	81 ff       	sbrs	r24, 1
 306:	64 c0       	rjmp	.+200    	; 0x3d0 <main+0x104>
		{
			if (EchoTimerCount <= 460)													// расчет по формулам в трех диапазонах (см. файл .xlsx)
 308:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <EchoTimerCount>
 30c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <EchoTimerCount+0x1>
 310:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <EchoTimerCount+0x2>
 314:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <EchoTimerCount+0x3>
 318:	8d 3c       	cpi	r24, 0xCD	; 205
 31a:	91 40       	sbci	r25, 0x01	; 1
 31c:	a1 05       	cpc	r26, r1
 31e:	b1 05       	cpc	r27, r1
 320:	90 f4       	brcc	.+36     	; 0x346 <main+0x7a>
				Dig_Ind = 182 - EchoTimerCount * 182 / 1620;
 322:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <EchoTimerCount>
 326:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <EchoTimerCount+0x1>
 32a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <EchoTimerCount+0x2>
 32e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <EchoTimerCount+0x3>
 332:	26 eb       	ldi	r18, 0xB6	; 182
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	1c d1       	rcall	.+568    	; 0x574 <__mulsi3>
 33c:	a3 01       	movw	r20, r6
 33e:	92 01       	movw	r18, r4
 340:	32 d1       	rcall	.+612    	; 0x5a6 <__udivmodsi4>
 342:	ce 01       	movw	r24, r28
 344:	30 c0       	rjmp	.+96     	; 0x3a6 <main+0xda>
			else if (EchoTimerCount >= 1260)	
 346:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <EchoTimerCount>
 34a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <EchoTimerCount+0x1>
 34e:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <EchoTimerCount+0x2>
 352:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <EchoTimerCount+0x3>
 356:	8c 3e       	cpi	r24, 0xEC	; 236
 358:	94 40       	sbci	r25, 0x04	; 4
 35a:	a1 05       	cpc	r26, r1
 35c:	b1 05       	cpc	r27, r1
 35e:	90 f0       	brcs	.+36     	; 0x384 <main+0xb8>
				Dig_Ind = 162 - EchoTimerCount * 162 / 1495;
 360:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <EchoTimerCount>
 364:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <EchoTimerCount+0x1>
 368:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <EchoTimerCount+0x2>
 36c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <EchoTimerCount+0x3>
 370:	22 ea       	ldi	r18, 0xA2	; 162
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	fd d0       	rcall	.+506    	; 0x574 <__mulsi3>
 37a:	a5 01       	movw	r20, r10
 37c:	94 01       	movw	r18, r8
 37e:	13 d1       	rcall	.+550    	; 0x5a6 <__udivmodsi4>
 380:	c8 01       	movw	r24, r16
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <main+0xda>
			else								
				Dig_Ind = 190 - EchoTimerCount * 190 / 1455;			
 384:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <EchoTimerCount>
 388:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <EchoTimerCount+0x1>
 38c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <EchoTimerCount+0x2>
 390:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <EchoTimerCount+0x3>
 394:	2e eb       	ldi	r18, 0xBE	; 190
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	eb d0       	rcall	.+470    	; 0x574 <__mulsi3>
 39e:	a7 01       	movw	r20, r14
 3a0:	96 01       	movw	r18, r12
 3a2:	01 d1       	rcall	.+514    	; 0x5a6 <__udivmodsi4>
 3a4:	c1 01       	movw	r24, r2
 3a6:	82 1b       	sub	r24, r18
 3a8:	93 0b       	sbc	r25, r19
 3aa:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <Dig_Ind+0x1>
 3ae:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <Dig_Ind>
			
			Dig_Ind_Avr = Averaging(Dig_Ind);											// Усреднение получаемых результатов измерения (ликвидация скачков)
 3b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <Dig_Ind>
 3b6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <Dig_Ind+0x1>
 3ba:	89 de       	rcall	.-750    	; 0xce <Averaging>
 3bc:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Dig_Ind_Avr+0x1>
 3c0:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Dig_Ind_Avr>

			SetSymbols();																// разделение полученного значения по разрядам индикатора
 3c4:	bb de       	rcall	.-650    	; 0x13c <SetSymbols>
			Flag_byte &=~ (1<<_echo_ended);												// сброс флага об имеющемся результате замера
 3c6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 3ca:	8d 7f       	andi	r24, 0xFD	; 253
 3cc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		}
		
		if ((Flag_byte & (1<<_btn_pressed)) && (CountTime >= Count_max_btn))			// нажата кнопка и отработан антидребезг
 3d0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 3d4:	84 ff       	sbrs	r24, 4
 3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <main+0x126>
 3d8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <CountTime>
 3dc:	88 37       	cpi	r24, 0x78	; 120
 3de:	48 f0       	brcs	.+18     	; 0x3f2 <main+0x126>
		{
			ChangeMode();																// смена режима
 3e0:	20 df       	rcall	.-448    	; 0x222 <ChangeMode>
			Flag_byte &=~ (1<<_btn_pressed);											// сброс флага нажатия кнопки
 3e2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 3e6:	8f 7e       	andi	r24, 0xEF	; 239
 3e8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
			GIMSK |= (1<<INT1);															// разрешение прерывания INT1 (ожидание след. нажатия)
 3ec:	8b b7       	in	r24, 0x3b	; 59
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	8b bf       	out	0x3b, r24	; 59
		}
		
		asm("nop");
 3f2:	00 00       	nop
		{																		//
			SendTrig();															//
			CountTime = 0;														//
		}																		//
		//////////////////////////////////////////////////////////////////////////	*/
	}
 3f4:	85 cf       	rjmp	.-246    	; 0x300 <main+0x34>

000003f6 <__vector_13>:
	**********************************************************************************************/

		/*------------------------------ По совпадению счетчика -----------------------------*/

ISR (TIMER0_COMPA_vect)																	// 3.3 ms
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
	switch (Curr_Razr)
 406:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Curr_Razr>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	09 f1       	breq	.+66     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 40e:	83 30       	cpi	r24, 0x03	; 3
 410:	b9 f1       	breq	.+110    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	09 f0       	breq	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	41 c0       	rjmp	.+130    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	{
		case 1:
			Razr_2_OFF; Razr_3_OFF; 
 418:	95 98       	cbi	0x12, 5	; 18
 41a:	94 98       	cbi	0x12, 4	; 18
			PORTB = Symbol [Sym_Razr_1];
 41c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <Sym_Razr_1>
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	e0 5a       	subi	r30, 0xA0	; 160
 424:	ff 4f       	sbci	r31, 0xFF	; 255
 426:	80 81       	ld	r24, Z
 428:	88 bb       	out	0x18, r24	; 24
			Curr_Razr ++;
 42a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Curr_Razr>
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Curr_Razr>
			if ((!(Flag_byte & 1<<_mode_on)) && (!(Flag_byte & 1<<_mode_off)) && (Sym_Razr_1 == 0)) break;	// отключение незначащего нуля в режиме AUTO
 434:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 438:	85 fd       	sbrc	r24, 5
 43a:	08 c0       	rjmp	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 440:	86 fd       	sbrc	r24, 6
 442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 444:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Sym_Razr_1>
 448:	88 23       	and	r24, r24
 44a:	39 f1       	breq	.+78     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			Razr_1_ON;
 44c:	96 9a       	sbi	0x12, 6	; 18
			break;
 44e:	25 c0       	rjmp	.+74     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		case 2:
			Razr_1_OFF; Razr_3_OFF;
 450:	96 98       	cbi	0x12, 6	; 18
 452:	94 98       	cbi	0x12, 4	; 18
			PORTB = Symbol [Sym_Razr_2];
 454:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <Sym_Razr_2>
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	e0 5a       	subi	r30, 0xA0	; 160
 45c:	ff 4f       	sbci	r31, 0xFF	; 255
 45e:	80 81       	ld	r24, Z
 460:	88 bb       	out	0x18, r24	; 24
			Curr_Razr ++;
 462:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Curr_Razr>
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Curr_Razr>
			if ((Sym_Razr_1 == 0) && (Sym_Razr_2 == 0)) break;							// отключение незначащего нуля
 46c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Sym_Razr_1>
 470:	81 11       	cpse	r24, r1
 472:	04 c0       	rjmp	.+8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 474:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Sym_Razr_2>
 478:	88 23       	and	r24, r24
 47a:	79 f0       	breq	.+30     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			Razr_2_ON;
 47c:	95 9a       	sbi	0x12, 5	; 18
			break;
 47e:	0d c0       	rjmp	.+26     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		case 3:
			Razr_1_OFF; Razr_2_OFF;
 480:	96 98       	cbi	0x12, 6	; 18
 482:	95 98       	cbi	0x12, 5	; 18
			PORTB = Symbol [Sym_Razr_3];
 484:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Sym_Razr_3>
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	e0 5a       	subi	r30, 0xA0	; 160
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	80 81       	ld	r24, Z
 490:	88 bb       	out	0x18, r24	; 24
			Curr_Razr = 1;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Curr_Razr>
			Razr_3_ON;
 498:	94 9a       	sbi	0x12, 4	; 18
			break;
	}	
	
	CountTime++;
 49a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <CountTime>
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <CountTime>
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_18>:

		/*------------------------------- По таймеру Watchdog -------------------------------*/

ISR (WDT_OVERFLOW_vect)																	// 2.0 s
{
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
	SendTrig();																			// отправка импульса на Trig датчика
 4d6:	ee dd       	rcall	.-1060   	; 0xb4 <SendTrig>
	
	WDTCR |= (1<<WDIE);
 4d8:	81 b5       	in	r24, 0x21	; 33
 4da:	80 64       	ori	r24, 0x40	; 64
 4dc:	81 bd       	out	0x21, r24	; 33
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_1>:

		/*--------------------- При поступлении сигнала с датчика SR04 ----------------------*/
        
ISR (INT0_vect)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
	if ((Flag_byte & (1<<_echo_ongoing)) == 0)											// Если Echo только пошел (_echo_ongoing == 0)
 512:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 516:	80 fd       	sbrc	r24, 0
 518:	0b c0       	rjmp	.+22     	; 0x530 <__vector_1+0x30>
	{
		TCNT1 = 0;																		// Сброс счетчика таймера
 51a:	1d bc       	out	0x2d, r1	; 45
 51c:	1c bc       	out	0x2c, r1	; 44
		Flag_byte |= (1<<_echo_ongoing);												// Запись во флаг о начале према Echo
 51e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 522:	81 60       	ori	r24, 0x01	; 1
 524:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		MCUCR &=~ (1<<ISC00);															// Прерывание по убывающему фронту INT0 (ожидание конца импульса Echo)
 528:	85 b7       	in	r24, 0x35	; 53
 52a:	8e 7f       	andi	r24, 0xFE	; 254
 52c:	85 bf       	out	0x35, r24	; 53
 52e:	19 c0       	rjmp	.+50     	; 0x562 <__vector_1+0x62>
	}
	else
	{
		EchoTimerCount = TCNT1;															// Сохранение количества тактов счетчика
 530:	8c b5       	in	r24, 0x2c	; 44
 532:	9d b5       	in	r25, 0x2d	; 45
 534:	a0 e0       	ldi	r26, 0x00	; 0
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <EchoTimerCount>
 53c:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <EchoTimerCount+0x1>
 540:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <EchoTimerCount+0x2>
 544:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <EchoTimerCount+0x3>
		Flag_byte &=~ (1<<_echo_ongoing);												// Очистка флага приема импульса
 548:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 54c:	8e 7f       	andi	r24, 0xFE	; 254
 54e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		Flag_byte |= (1<<_echo_ended);													// Запись флага об окончании измерения
 552:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Flag_byte>
 556:	82 60       	ori	r24, 0x02	; 2
 558:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Flag_byte>
		GIMSK &=~ (1<<INT0);															// Запрет прерываний по INT0
 55c:	8b b7       	in	r24, 0x3b	; 59
 55e:	8f 7b       	andi	r24, 0xBF	; 191
 560:	8b bf       	out	0x3b, r24	; 59
	}
}
 562:	bf 91       	pop	r27
 564:	af 91       	pop	r26
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__mulsi3>:
 574:	ee 27       	eor	r30, r30
 576:	ff 27       	eor	r31, r31

00000578 <__mulsi3_helper>:
 578:	aa 27       	eor	r26, r26
 57a:	bb 27       	eor	r27, r27
 57c:	08 c0       	rjmp	.+16     	; 0x58e <__mulsi3_helper+0x16>
 57e:	a2 0f       	add	r26, r18
 580:	b3 1f       	adc	r27, r19
 582:	e4 1f       	adc	r30, r20
 584:	f5 1f       	adc	r31, r21
 586:	22 0f       	add	r18, r18
 588:	33 1f       	adc	r19, r19
 58a:	44 1f       	adc	r20, r20
 58c:	55 1f       	adc	r21, r21
 58e:	96 95       	lsr	r25
 590:	87 95       	ror	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	98 f3       	brcs	.-26     	; 0x57e <__mulsi3_helper+0x6>
 598:	70 40       	sbci	r23, 0x00	; 0
 59a:	a9 f7       	brne	.-22     	; 0x586 <__mulsi3_helper+0xe>
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	99 f7       	brne	.-26     	; 0x586 <__mulsi3_helper+0xe>
 5a0:	bd 01       	movw	r22, r26
 5a2:	cf 01       	movw	r24, r30
 5a4:	08 95       	ret

000005a6 <__udivmodsi4>:
 5a6:	a1 e2       	ldi	r26, 0x21	; 33
 5a8:	1a 2e       	mov	r1, r26
 5aa:	aa 1b       	sub	r26, r26
 5ac:	bb 1b       	sub	r27, r27
 5ae:	fd 01       	movw	r30, r26
 5b0:	0d c0       	rjmp	.+26     	; 0x5cc <__udivmodsi4_ep>

000005b2 <__udivmodsi4_loop>:
 5b2:	aa 1f       	adc	r26, r26
 5b4:	bb 1f       	adc	r27, r27
 5b6:	ee 1f       	adc	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	a2 17       	cp	r26, r18
 5bc:	b3 07       	cpc	r27, r19
 5be:	e4 07       	cpc	r30, r20
 5c0:	f5 07       	cpc	r31, r21
 5c2:	20 f0       	brcs	.+8      	; 0x5cc <__udivmodsi4_ep>
 5c4:	a2 1b       	sub	r26, r18
 5c6:	b3 0b       	sbc	r27, r19
 5c8:	e4 0b       	sbc	r30, r20
 5ca:	f5 0b       	sbc	r31, r21

000005cc <__udivmodsi4_ep>:
 5cc:	66 1f       	adc	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	1a 94       	dec	r1
 5d6:	69 f7       	brne	.-38     	; 0x5b2 <__udivmodsi4_loop>
 5d8:	60 95       	com	r22
 5da:	70 95       	com	r23
 5dc:	80 95       	com	r24
 5de:	90 95       	com	r25
 5e0:	9b 01       	movw	r18, r22
 5e2:	ac 01       	movw	r20, r24
 5e4:	bd 01       	movw	r22, r26
 5e6:	cf 01       	movw	r24, r30
 5e8:	08 95       	ret

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
